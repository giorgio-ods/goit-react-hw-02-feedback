{"version":3,"sources":["components/Section.js","components/Stats.js","components/FeedbackOptions.js","components/Notification.js","App.js","index.js"],"names":["Section","title","children","Stats","good","bad","neutral","total","positivePercentage","FeedbackOptions","options","onFeedbackIncrement","map","option","type","status","onClick","Notification","message","App","state","addFeedbackCount","setState","prevState","countTotal","countPositivePercentage","Math","round","this","Object","keys","Component","ReactDOM","render","document","querySelector"],"mappings":"sPAEe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACrC,OACI,oCACI,6BAAKD,IACJC,KCHE,SAASC,EAAT,GAAiE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBACtD,OACI,gCACI,+BACI,wCAAWJ,KACX,2CAAcE,KACd,uCAAUD,QAEd,wCAAWE,KACX,gEAAmCC,QCVhC,SAASC,EAAT,GAA0D,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,oBAC9C,OACA,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBACEC,KAAK,SAELC,OAAQF,EACRG,QAAS,kBAAML,EAAoBE,IAJrC,SAMGA,GAJIA,QCNA,SAASI,EAAT,GAAkC,IAAXC,EAAU,EAAVA,QAClC,OAAO,6BAAKA,I,ICIVC,E,4MACFC,MAAQ,CACJhB,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAGTgB,iBAAmB,SAAAR,GACf,EAAKS,UAAS,SAAAC,GAAS,sBAClBV,EAASU,EAAUV,GAAU,O,EAItCW,WAAa,WACb,MAA+B,EAAKJ,MACpC,OADA,EAAQhB,KAAR,EAAcE,QAAd,EAAuBD,K,EAIvBoB,wBAA0B,WACtB,IAAQrB,EAAS,EAAKgB,MAAdhB,KACR,OAAOsB,KAAKC,MAAOvB,EAAO,EAAKoB,aAAgB,M,4CAInD,WACI,MAA+BI,KAAKR,MAA5BhB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,QACnB,OACI,gCACI,cAACN,EAAD,CAASC,MAAM,uCAAf,SACI,cAACQ,EAAD,CAAiBC,QAASmB,OAAOC,KAAKF,KAAKR,OAAQT,oBAAqBiB,KAAKP,qBAE1D,IAAtBO,KAAKJ,aAAsB,cAACP,EAAD,CAAcC,QAAQ,qBAC7C,cAAClB,EAAD,CAASC,MAAM,aAAf,SACG,cAACE,EAAD,CAAOC,KAAMA,EAAME,QAASA,EAASD,IAAKA,EAAKE,MAAOqB,KAAKJ,aAAchB,mBAAoBoB,KAAKH,qC,GAjCxGM,aA0CHZ,IC1Cfa,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.a1522bb9.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport default function Section({ title, children }) {\r\n    return (\r\n        <section>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string\r\n}","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Stats({good, bad, neutral, total, positivePercentage}) {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <li>Good: {good}</li>\r\n                <li>Neutral: {neutral}</li>\r\n                <li>Bad: {bad}</li>\r\n            </ul>\r\n            <p>Total: {total}</p>\r\n            <p>Positive Feedbacks Percentage: {positivePercentage}</p>\r\n        </div>\r\n    )   \r\n}\r\n\r\nStats.propTypes = {\r\n    good: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.number\r\n}","import PropTypes from 'prop-types';\r\n\r\nexport default function FeedbackOptions({options, onFeedbackIncrement}) {\r\n    return (\r\n    <div>\r\n      {options.map(option => (\r\n        <button\r\n          type=\"button\"\r\n          key={option}\r\n          status={option}\r\n          onClick={() => onFeedbackIncrement(option)}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    option: PropTypes.arrayOf(PropTypes.string)\r\n}","import PropTypes from 'prop-types';\r\n\r\nexport default function Notification({message}) {\r\n    return <h2>{message}</h2>\r\n}\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string\r\n}","import React, { Component } from \"react\";\r\nimport Section from \"./components/Section\";\r\nimport Stats from \"./components/Stats\"\r\nimport FeedbackOptions from \"./components/FeedbackOptions\";\r\nimport Notification from \"./components/Notification\";\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0\r\n    }\r\n\r\n    addFeedbackCount = option => {\r\n        this.setState(prevState => ({\r\n            [option]: prevState[option] + 1\r\n        }))\r\n    }\r\n\r\n    countTotal = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    return good + neutral + bad;\r\n    };\r\n    \r\n    countPositivePercentage = () => {\r\n        const { good } = this.state;\r\n        return Math.round((good / this.countTotal()) * 100)\r\n    }\r\n\r\n        \r\n    render() {\r\n        const { good, bad, neutral } = this.state;\r\n        return (\r\n            <div>\r\n                <Section title=\"Cafe Expresso. Please leave feedback\">\r\n                    <FeedbackOptions options={Object.keys(this.state)} onFeedbackIncrement={this.addFeedbackCount}/>\r\n                </Section>\r\n                {this.countTotal() === 0 ? (<Notification message=\"No feedbacks yet\" />) :\r\n                    (<Section title=\"Statistics\">\r\n                        <Stats good={good} neutral={neutral} bad={bad} total={this.countTotal()} positivePercentage={this.countPositivePercentage()} />\r\n                    </Section>)}\r\n            </div>\r\n            \r\n        )\r\n}\r\n\r\n}\r\n\r\nexport default App;\r\n\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App'\n\n\n\nReactDOM.render(<App />, document.querySelector('#root'))\n\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}